{"mappings":";;;;;;;;;;;AAAA,SAASA,sBAAT,CAAgCC,CAAhC,EAAmC;AACjC,SAAOA,CAAC,IAAIA,CAAC,CAACC,UAAP,GAAoBD,CAAC,CAACE,OAAtB,GAAgCF,CAAvC;AACD;;ACuBD;AACA;AACA;AACA;AACA;AACA,MAAMG,kDAA+B,GAAG;AACtCC,EAAAA,MAAM,EAAEC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KAAgB,WAA3B,CAD8B;AAEtCC,EAAAA,OAAO,EAAE;AAF6B,CAAxC;;AAKA,MAAMC,8CAAU,gBAAGC,MAAK,CAACC,aAAN,CAAqCR,kDAArC,CAAnB;;AAOA;;;;AAIO,SAASS,WAAT,CAAqBC,KAArB,EAA2D;AAChE,MAAIC,GAAG,GAAGC,UAAU,CAACN,8CAAD,CAApB;AACA,MAAIO,KAAsB,GAAGC,OAAO,CAAC,OAAO;AAC1C;AACAb,IAAAA,MAAM,EAAEU,GAAG,KAAKX,kDAAR,GAAyB,CAAzB,GAA6B,EAAEW,GAAG,CAACV,MAFD;AAG1CI,IAAAA,OAAO,EAAE;AAHiC,GAAP,CAAD,EAIhC,CAACM,GAAD,CAJgC,CAApC;AAMA,sBACE,qBAAC,8CAAD,CAAY,QAAZ;AAAqB,IAAA,KAAK,EAAEE;AAA5B,KACGH,KAAK,CAACK,QADT,CADF;AAKD;;;AAED,IAAIC,6CAAS,GAAGC,OAAO,CACrB,OAAOC,MAAP,KAAkB,WAAlB,IACAA,MAAM,CAACC,QADP,IAEAD,MAAM,CAACC,QAAP,CAAgBC,aAHK,CAAvB;AAMA;;AACO,SAASC,YAAT,CAAsBC,SAAtB,EAAkD;AACvD,MAAIC,GAAG,GAAGX,UAAU,CAACN,8CAAD,CAApB,CADuD,CAGvD;AACA;;AACA,MAAIiB,GAAG,KAAKvB,kDAAR,IAA0B,CAACgB,6CAA/B,EAA0C;AACxCQ,IAAAA,OAAO,CAACC,IAAR,CAAa,iJAAb;AACD;;AAED,SAAOX,OAAO,CAAC,MAAMQ,SAAS,oBAAkBC,GAAG,CAACtB,MAAtB,SAAgC,EAAEsB,GAAG,CAAClB,OAAtD,EAAiE,CAACiB,SAAD,CAAjE,CAAd;AACD;AAED;;;;;;;;;AAKO,SAASI,QAAT,GAA6B;AAClC,MAAIf,GAAG,GAAGC,UAAU,CAACN,8CAAD,CAApB;AACA,MAAIqB,cAAc,GAAGhB,GAAG,KAAKX,kDAA7B;AACA,MAAI,CAAC4B,KAAD,EAAQC,QAAR,IAAoBC,QAAQ,CAACH,cAAD,CAAhC,CAHkC,CAKlC;AACA;;AACA,MAAI,OAAOT,MAAP,KAAkB,WAAlB,IAAiCS,cAArC,EAAqD;AACnD;AACA;AACA;AACAI,IAAAA,eAAe,CAAC,MAAM;AACpBF,MAAAA,QAAQ,CAAC,KAAD,CAAR;AACD,KAFc,EAEZ,EAFY,CAAf;AAGD;;AAED,SAAOD,KAAP;AACD","sources":["./node_modules/@parcel/scope-hoisting/lib/helpers.js","./packages/@react-aria/ssr/src/SSRProvider.tsx"],"sourcesContent":["function $parcel$interopDefault(a) {\n  return a && a.__esModule ? a.default : a;\n}\n\nfunction $parcel$defineInteropFlag(a) {\n  Object.defineProperty(a, '__esModule', {value: true});\n}\n\nfunction $parcel$exportWildcard(dest, source) {\n  Object.keys(source).forEach(function(key) {\n    if (key === 'default' || key === '__esModule') {\n      return;\n    }\n\n    Object.defineProperty(dest, key, {\n      enumerable: true,\n      get: function get() {\n        return source[key];\n      },\n    });\n  });\n\n  return dest;\n}\n\nfunction $parcel$missingModule(name) {\n  var err = new Error(\"Cannot find module '\" + name + \"'\");\n  err.code = 'MODULE_NOT_FOUND';\n  throw err;\n}\n\nvar $parcel$global =\n  typeof globalThis !== 'undefined'\n    ? globalThis\n    : typeof self !== 'undefined'\n    ? self\n    : typeof window !== 'undefined'\n    ? window\n    : typeof global !== 'undefined'\n    ? global\n    : {};\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport React, {ReactNode, useContext, useLayoutEffect, useMemo, useState} from 'react';\n\n// To support SSR, the auto incrementing id counter is stored in a context. This allows\n// it to be reset on every request to ensure the client and server are consistent.\n// There is also a prefix counter that is used to support async loading components\n// Each async boundary must be wrapped in an SSR provider, which increments the prefix\n// and resets the current id counter. This ensures that async loaded components have\n// consistent ids regardless  of the loading order.\ninterface SSRContextValue {\n  prefix: number,\n  current: number\n}\n\n// Default context value to use in case there is no SSRProvider. This is fine for\n// client-only apps. In order to support multiple copies of React Aria potentially\n// being on the page at once, the prefix is set to a random number. SSRProvider\n// will reset this to zero for consistency between server and client, so in the\n// SSR case multiple copies of React Aria is not supported.\nconst defaultContext: SSRContextValue = {\n  prefix: Math.round(Math.random() * 10000000000),\n  current: 0\n};\n\nconst SSRContext = React.createContext<SSRContextValue>(defaultContext);\n\ninterface SSRProviderProps {\n  /** Your application here. */\n  children: ReactNode\n}\n\n/**\n * When using SSR with React Aria, applications must be wrapped in an SSRProvider.\n * This ensures that auto generated ids are consistent between the client and server.\n */\nexport function SSRProvider(props: SSRProviderProps): JSX.Element {\n  let cur = useContext(SSRContext);\n  let value: SSRContextValue = useMemo(() => ({\n    // If this is the first SSRProvider, set to zero, otherwise increment.\n    prefix: cur === defaultContext ? 0 : ++cur.prefix,\n    current: 0\n  }), [cur]);\n\n  return (\n    <SSRContext.Provider value={value}>\n      {props.children}\n    </SSRContext.Provider>\n  );\n}\n\nlet canUseDOM = Boolean(\n  typeof window !== 'undefined' &&\n  window.document &&\n  window.document.createElement\n);\n\n/** @private */\nexport function useSSRSafeId(defaultId?: string): string {\n  let ctx = useContext(SSRContext);\n\n  // If we are rendering in a non-DOM environment, and there's no SSRProvider,\n  // provide a warning to hint to the developer to add one.\n  if (ctx === defaultContext && !canUseDOM) {\n    console.warn('When server rendering, you must wrap your application in an <SSRProvider> to ensure consistent ids are generated between the client and server.');\n  }\n\n  return useMemo(() => defaultId || `react-aria-${ctx.prefix}-${++ctx.current}`, [defaultId]);\n}\n\n/**\n * Returns whether the component is currently being server side rendered or\n * hydrated on the client. Can be used to delay browser-specific rendering\n * until after hydration.\n */\nexport function useIsSSR(): boolean {\n  let cur = useContext(SSRContext);\n  let isInSSRContext = cur !== defaultContext;\n  let [isSSR, setIsSSR] = useState(isInSSRContext);\n\n  // If on the client, and the component was initially server rendered,\n  // then schedule a layout effect to update the component after hydration.\n  if (typeof window !== 'undefined' && isInSSRContext) {\n    // This if statement technically breaks the rules of hooks, but is safe\n    // because the condition never changes after mounting.\n    // eslint-disable-next-line react-hooks/rules-of-hooks\n    useLayoutEffect(() => {\n      setIsSSR(false);\n    }, []);\n  }\n\n  return isSSR;\n}\n"],"names":["$parcel$interopDefault","a","__esModule","default","defaultContext","prefix","Math","round","random","current","SSRContext","React","createContext","SSRProvider","props","cur","useContext","value","useMemo","children","canUseDOM","Boolean","window","document","createElement","useSSRSafeId","defaultId","ctx","console","warn","useIsSSR","isInSSRContext","isSSR","setIsSSR","useState","useLayoutEffect"],"version":3,"file":"main.js.map"}