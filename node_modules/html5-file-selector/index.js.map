{"version":3,"file":null,"sources":["../src/Html5FileSelector.js","../src/index.js"],"sourcesContent":["const DEFAULT_FILES_TO_IGNORE = [\n  '.DS_Store', // OSX indexing file\n  'Thumbs.db'  // Windows indexing file\n];\n\n// map of common (mostly media types) mime types to use when the browser does not supply the mime type\nconst EXTENSION_TO_MIME_TYPE_MAP = {\n  avi: 'video/avi',\n  gif: 'image/gif',\n  ico: 'image/x-icon',\n  jpeg: 'image/jpeg',\n  jpg: 'image/jpeg',\n  mkv: 'video/x-matroska',\n  mov: 'video/quicktime',\n  mp4: 'video/mp4',\n  pdf: 'application/pdf',\n  png: 'image/png',\n  zip: 'application/zip'\n};\n\nfunction shouldIgnoreFile(file) {\n  return DEFAULT_FILES_TO_IGNORE.indexOf(file.name) >= 0;\n}\n\nfunction copyString(aString) {\n  return ` ${aString}`.slice(1);\n}\n\nfunction traverseDirectory(entry) {\n  const reader = entry.createReader();\n  // Resolved when the entire directory is traversed\n  return new Promise((resolveDirectory) => {\n    const iterationAttempts = [];\n    const errorHandler = () => {};\n    function readEntries() {\n      // According to the FileSystem API spec, readEntries() must be called until\n      // it calls the callback with an empty array.\n      reader.readEntries((batchEntries) => {\n        if (!batchEntries.length) {\n          // Done iterating this particular directory\n          resolveDirectory(Promise.all(iterationAttempts));\n        } else {\n          // Add a list of promises for each directory entry.  If the entry is itself\n          // a directory, then that promise won't resolve until it is fully traversed.\n          iterationAttempts.push(Promise.all(batchEntries.map((batchEntry) => {\n            if (batchEntry.isDirectory) {\n              return traverseDirectory(batchEntry);\n            }\n            return Promise.resolve(batchEntry);\n          })));\n          // Try calling readEntries() again for the same dir, according to spec\n          readEntries();\n        }\n      }, errorHandler);\n    }\n    // initial call to recursive entry reader function\n    readEntries();\n  });\n}\n\n// package the file in an object that includes the fullPath from the file entry\n// that would otherwise be lost\nfunction packageFile(file, entry) {\n  let fileTypeOverride = '';\n  // handle some browsers sometimes missing mime types for dropped files\n  const hasExtension = file.name && file.name.lastIndexOf('.') !== -1;\n  if (hasExtension && !file.type) {\n    const fileExtension = (file.name || '').split('.').pop();\n    fileTypeOverride = EXTENSION_TO_MIME_TYPE_MAP[fileExtension];\n  }\n  return {\n    fileObject: file, // provide access to the raw File object (required for uploading)\n    fullPath: entry ? copyString(entry.fullPath) : file.name,\n    lastModified: file.lastModified,\n    lastModifiedDate: file.lastModifiedDate,\n    name: file.name,\n    size: file.size,\n    type: file.type ? file.type : fileTypeOverride,\n    webkitRelativePath: file.webkitRelativePath\n  };\n}\n\nfunction getFile(entry) {\n  return new Promise((resolve) => {\n    entry.file((file) => {\n      resolve(packageFile(file, entry));\n    });\n  });\n}\n\nfunction handleFilePromises(promises, fileList) {\n  return Promise.all(promises).then((files) => {\n    files.forEach((file) => {\n      if (!shouldIgnoreFile(file)) {\n        fileList.push(file);\n      }\n    });\n    return fileList;\n  });\n}\n\nexport function getDataTransferFiles(dataTransfer) {\n  const dataTransferFiles = [];\n  const folderPromises = [];\n  const filePromises = [];\n\n  [].slice.call(dataTransfer.items).forEach((listItem) => {\n    if (typeof listItem.webkitGetAsEntry === 'function') {\n      const entry = listItem.webkitGetAsEntry();\n\n      if (entry) {\n        if (entry.isDirectory) {\n          folderPromises.push(traverseDirectory(entry));\n        } else {\n          filePromises.push(getFile(entry));\n        }\n      }\n    } else {\n      dataTransferFiles.push(listItem);\n    }\n  });\n  if (folderPromises.length) {\n    const flatten = (array) => array.reduce((a, b) => a.concat(Array.isArray(b) ? flatten(b) : b), []);\n    return Promise.all(folderPromises).then((fileEntries) => {\n      const flattenedEntries = flatten(fileEntries);\n      // collect async promises to convert each fileEntry into a File object\n      flattenedEntries.forEach((fileEntry) => {\n        filePromises.push(getFile(fileEntry));\n      });\n      return handleFilePromises(filePromises, dataTransferFiles);\n    });\n  } else if (filePromises.length) {\n    return handleFilePromises(filePromises, dataTransferFiles);\n  }\n  return Promise.resolve(dataTransferFiles);\n}\n\n/**\n * This function should be called from both the onDrop event from your drag/drop\n * dropzone as well as from the HTML5 file selector input field onChange event\n * handler.  Pass the event object from the triggered event into this function.\n * Supports mix of files and folders dropped via drag/drop.\n *\n * Returns: an array of File objects, that includes all files within folders\n *   and subfolders of the dropped/selected items.\n */\nexport function getDroppedOrSelectedFiles(event) {\n  const dataTransfer = event.dataTransfer;\n  if (dataTransfer && dataTransfer.items) {\n    return getDataTransferFiles(dataTransfer).then((fileList) => {\n      return Promise.resolve(fileList);\n    });\n  }\n  const files = [];\n  const dragDropFileList = dataTransfer && dataTransfer.files;\n  const inputFieldFileList = event.target && event.target.files;\n  const fileList = dragDropFileList || inputFieldFileList || [];\n  // convert the FileList to a simple array of File objects\n  for (let i = 0; i < fileList.length; i++) {\n    files.push(packageFile(fileList[i]));\n  }\n  return Promise.resolve(files);\n}\n","/**\n * Html5 File Selector\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE.txt file in the root directory of this source tree.\n */\n\nexport { getDataTransferFiles, getDroppedOrSelectedFiles } from './Html5FileSelector.js';\n"],"names":["DEFAULT_FILES_TO_IGNORE","EXTENSION_TO_MIME_TYPE_MAP","shouldIgnoreFile","file","indexOf","name","copyString","aString","slice","traverseDirectory","entry","reader","createReader","Promise","resolveDirectory","iterationAttempts","errorHandler","readEntries","batchEntries","length","all","push","map","batchEntry","isDirectory","resolve","packageFile","fileTypeOverride","hasExtension","lastIndexOf","type","fileExtension","split","pop","fullPath","lastModified","lastModifiedDate","size","webkitRelativePath","getFile","handleFilePromises","promises","fileList","then","files","forEach","getDataTransferFiles","dataTransfer","dataTransferFiles","folderPromises","filePromises","call","items","listItem","webkitGetAsEntry","flatten","array","reduce","a","b","concat","Array","isArray","fileEntries","flattenedEntries","fileEntry","getDroppedOrSelectedFiles","event","dragDropFileList","inputFieldFileList","target","i"],"mappings":"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"}