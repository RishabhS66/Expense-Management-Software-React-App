{"ast":null,"code":"import { FETCH_PROJECTS, FETCH_PROJECTS_FAIL } from \"./types\";\nimport projectService from \"../services/project.service\";\nexport const getProjects = () => dispatch => {\n  projectService.getProjects().then(data => {\n    dispatch({\n      type: FETCH_PROJECTS,\n      payload: {\n        projects: data\n      }\n    });\n    return Promise.resolve();\n  }, error => {\n    const message = error.response && error.response.data && error.response.data.message || error.message || error.toString();\n    dispatch({\n      type: FETCH_PROJECTS_FAIL\n    });\n    dispatch({\n      type: SET_MESSAGE,\n      payload: message\n    });\n    return Promise.reject();\n  });\n};","map":{"version":3,"sources":["/Users/rissriva/Desktop/ExpenseManagementSystem/ExpenseManagement/frontend/src/actions/getProjects.js"],"names":["FETCH_PROJECTS","FETCH_PROJECTS_FAIL","projectService","getProjects","dispatch","then","data","type","payload","projects","Promise","resolve","error","message","response","toString","SET_MESSAGE","reject"],"mappings":"AAAA,SAASA,cAAT,EAAyBC,mBAAzB,QAAoD,SAApD;AACA,OAAOC,cAAP,MAA2B,6BAA3B;AAEA,OAAO,MAAMC,WAAW,GAAG,MAAOC,QAAD,IAAc;AAC7CF,EAAAA,cAAc,CAACC,WAAf,GAA6BE,IAA7B,CACGC,IAAD,IAAU;AACRF,IAAAA,QAAQ,CAAC;AACPG,MAAAA,IAAI,EAAEP,cADC;AAEPQ,MAAAA,OAAO,EAAE;AAAEC,QAAAA,QAAQ,EAAEH;AAAZ;AAFF,KAAD,CAAR;AAKA,WAAOI,OAAO,CAACC,OAAR,EAAP;AACD,GARH,EASGC,KAAD,IAAW;AACT,UAAMC,OAAO,GACVD,KAAK,CAACE,QAAN,IACCF,KAAK,CAACE,QAAN,CAAeR,IADhB,IAECM,KAAK,CAACE,QAAN,CAAeR,IAAf,CAAoBO,OAFtB,IAGAD,KAAK,CAACC,OAHN,IAIAD,KAAK,CAACG,QAAN,EALF;AAOAX,IAAAA,QAAQ,CAAC;AACPG,MAAAA,IAAI,EAAEN;AADC,KAAD,CAAR;AAIAG,IAAAA,QAAQ,CAAC;AACPG,MAAAA,IAAI,EAAES,WADC;AAEPR,MAAAA,OAAO,EAAEK;AAFF,KAAD,CAAR;AAKA,WAAOH,OAAO,CAACO,MAAR,EAAP;AACD,GA3BH;AA6BD,CA9BM","sourcesContent":["import { FETCH_PROJECTS, FETCH_PROJECTS_FAIL } from \"./types\";\nimport projectService from \"../services/project.service\";\n\nexport const getProjects = () => (dispatch) => {\n  projectService.getProjects().then(\n    (data) => {\n      dispatch({\n        type: FETCH_PROJECTS,\n        payload: { projects: data },\n      });\n\n      return Promise.resolve();\n    },\n    (error) => {\n      const message =\n        (error.response &&\n          error.response.data &&\n          error.response.data.message) ||\n        error.message ||\n        error.toString();\n\n      dispatch({\n        type: FETCH_PROJECTS_FAIL,\n      });\n\n      dispatch({\n        type: SET_MESSAGE,\n        payload: message,\n      });\n\n      return Promise.reject();\n    }\n  );\n};\n"]},"metadata":{},"sourceType":"module"}