{"ast":null,"code":"import { expenseConstants } from \"../constants/expense.constants\";\nimport expenseService from \"../services/expense.service\";\nimport { SET_MESSAGE } from \"./types\";\nexport const getExpenseSheets = () => dispatch => {\n  return expenseService.getExpenseSheets().then(data => {\n    dispatch({\n      type: expenseConstants.GET_SHEETS_SUCCESS,\n      payload: {\n        entries: data\n      }\n    });\n    return Promise.resolve();\n  }, error => {\n    const message = error.response && error.response.data && error.response.data.message || error.message || error.toString();\n    dispatch({\n      type: expenseConstants.GET_SHEETS_FAILURE\n    });\n    dispatch({\n      type: SET_MESSAGE,\n      payload: message\n    });\n    return Promise.reject();\n  });\n};\nexport const addEntry = payload => dispatch => {\n  return expenseService.addEntry(payload).then(data => {\n    dispatch({\n      type: expenseConstants.ADD_SHEETS_SUCCESS,\n      payload: {\n        entry: data\n      }\n    });\n    return Promise.resolve();\n  }, error => {\n    const message = \"Entry could not be added\";\n    console.log(message);\n    dispatch({\n      type: expenseConstants.ADD_SHEETS_FAILURE\n    });\n    dispatch({\n      type: SET_MESSAGE,\n      payload: message\n    });\n    return Promise.reject;\n  });\n};\nexport const deleteEntry = id => dispatch => {\n  return expenseService.deleteEntry(id).then(data => {\n    dispatch({\n      type: expenseConstants.DELETE_SHEETS_SUCCESS,\n      payload: {\n        entry: data\n      }\n    });\n    return Promise.resolve();\n  }, error => {\n    const message = error.response && error.response.data && error.response.data.message || error.message || error.toString();\n    dispatch({\n      type: expenseConstants.DELETE_SHEETS_FAILURE\n    });\n    dispatch({\n      type: SET_MESSAGE,\n      payload: message\n    });\n    return Promise.reject();\n  });\n};\nexport const editEntry = (id, payload) => dispatch => {\n  return expenseService.editEntry(id, payload).then(data => {\n    dispatch({\n      type: expenseConstants.EDIT_SHEETS_SUCCESS,\n      payload: {\n        entry: data\n      }\n    });\n    return Promise.resolve();\n  }, error => {\n    const message = \"Entry Edit Failed\";\n    dispatch({\n      type: expenseConstants.EDIT_SHEETS_FAILURE\n    });\n    dispatch({\n      type: SET_MESSAGE,\n      payload: message\n    });\n    return Promise.reject();\n  });\n};","map":{"version":3,"sources":["/Users/rissriva/Desktop/ExpenseManagementSystem/ExpenseManagement/frontend/src/actions/expense.actions.js"],"names":["expenseConstants","expenseService","SET_MESSAGE","getExpenseSheets","dispatch","then","data","type","GET_SHEETS_SUCCESS","payload","entries","Promise","resolve","error","message","response","toString","GET_SHEETS_FAILURE","reject","addEntry","ADD_SHEETS_SUCCESS","entry","console","log","ADD_SHEETS_FAILURE","deleteEntry","id","DELETE_SHEETS_SUCCESS","DELETE_SHEETS_FAILURE","editEntry","EDIT_SHEETS_SUCCESS","EDIT_SHEETS_FAILURE"],"mappings":"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","sourcesContent":["import { expenseConstants } from \"../constants/expense.constants\";\nimport expenseService from \"../services/expense.service\";\nimport { SET_MESSAGE } from \"./types\";\n\nexport const getExpenseSheets = () => (dispatch) => {\n    return expenseService.getExpenseSheets().then(\n        (data) => {\n            dispatch({\n                type: expenseConstants.GET_SHEETS_SUCCESS,\n                payload: {entries : data},\n            });\n            return Promise.resolve();\n        },\n        (error) => {\n            const message = (error.response &&\n                error.response.data &&\n                error.response.data.message) ||\n              error.message ||\n              error.toString();\n      \n            dispatch({\n              type: expenseConstants.GET_SHEETS_FAILURE,\n            });\n      \n            dispatch({\n              type: SET_MESSAGE,\n              payload: message,\n            });\n      \n            return Promise.reject();\n          }\n        );\n      };\n\nexport const addEntry = (payload) => (dispatch) => {\n  return expenseService.addEntry(payload).then(\n    (data) => {\n      dispatch({\n        type: expenseConstants.ADD_SHEETS_SUCCESS,\n        payload : {entry: data},\n      });\n      return Promise.resolve();\n    },\n    (error) => {\n      const message = \"Entry could not be added\";\n      console.log(message);\n\n      dispatch({\n        type: expenseConstants.ADD_SHEETS_FAILURE,\n      });\n\n      dispatch({\n        type: SET_MESSAGE,\n        payload: message,\n      });\n\n      return Promise.reject;\n    }\n  )\n}\nexport const deleteEntry = (id) => (dispatch) => {\n  return expenseService.deleteEntry(id).then(\n    (data) => {\n      dispatch({\n        type : expenseConstants.DELETE_SHEETS_SUCCESS,\n        payload : {entry: data},\n      });\n      return Promise.resolve();\n    },\n    (error) => {\n      const message = (error.response &&\n          error.response.data &&\n          error.response.data.message) ||\n        error.message ||\n        error.toString();\n\n      dispatch({\n        type: expenseConstants.DELETE_SHEETS_FAILURE,\n      });\n\n      dispatch({\n        type: SET_MESSAGE,\n        payload: message,\n      });\n\n      return Promise.reject();\n    }\n  );\n}\n\n\nexport const editEntry = (id, payload) => (dispatch) => {\n  return expenseService.editEntry(id, payload).then(\n    (data) => {\n      dispatch({\n        type: expenseConstants.EDIT_SHEETS_SUCCESS,\n        payload: { entry: data },\n      });\n\n      return Promise.resolve();\n    },\n    (error) => {\n      const message = \"Entry Edit Failed\";\n        \n      dispatch({\n        type: expenseConstants.EDIT_SHEETS_FAILURE,\n      });\n\n      dispatch({\n        type: SET_MESSAGE,\n        payload: message,\n      });\n\n      return Promise.reject();\n    }\n  );\n}\n"]},"metadata":{},"sourceType":"module"}