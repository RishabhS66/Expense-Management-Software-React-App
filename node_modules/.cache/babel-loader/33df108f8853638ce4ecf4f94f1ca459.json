{"ast":null,"code":"import { LOGIN_SUCCESS, LOGIN_FAIL, LOGOUT, SET_MESSAGE } from \"./types\";\nimport AuthService from \"../services/auth.service\";\nexport const login = (username, password) => dispatch => {\n  return AuthService.login(username, password).then(data => {\n    dispatch({\n      type: LOGIN_SUCCESS,\n      payload: {\n        user: data\n      }\n    });\n    return Promise.resolve();\n  }, error => {\n    const message = \"Invalid Username or password\";\n    dispatch({\n      type: LOGIN_FAIL\n    });\n    dispatch({\n      type: SET_MESSAGE,\n      payload: message\n    });\n    return Promise.reject();\n  });\n};\nexport const logout = () => dispatch => {\n  AuthService.logout();\n  localStorage.removeItem(\"user\");\n  dispatch({\n    type: LOGOUT\n  });\n};","map":{"version":3,"sources":["/Users/rissriva/Desktop/ExpenseManagementSystem/ExpenseManagement/frontend/src/actions/auth.js"],"names":["LOGIN_SUCCESS","LOGIN_FAIL","LOGOUT","SET_MESSAGE","AuthService","login","username","password","dispatch","then","data","type","payload","user","Promise","resolve","error","message","reject","logout","localStorage","removeItem"],"mappings":"AAAA,SAASA,aAAT,EAAwBC,UAAxB,EAAoCC,MAApC,EAA4CC,WAA5C,QAA+D,SAA/D;AAEA,OAAOC,WAAP,MAAwB,0BAAxB;AAEA,OAAO,MAAMC,KAAK,GAAG,CAACC,QAAD,EAAWC,QAAX,KAAyBC,QAAD,IAAc;AACzD,SAAOJ,WAAW,CAACC,KAAZ,CAAkBC,QAAlB,EAA4BC,QAA5B,EAAsCE,IAAtC,CACJC,IAAD,IAAU;AACRF,IAAAA,QAAQ,CAAC;AACPG,MAAAA,IAAI,EAAEX,aADC;AAEPY,MAAAA,OAAO,EAAE;AAAEC,QAAAA,IAAI,EAAEH;AAAR;AAFF,KAAD,CAAR;AAKA,WAAOI,OAAO,CAACC,OAAR,EAAP;AACD,GARI,EASJC,KAAD,IAAW;AACT,UAAMC,OAAO,GAAG,8BAAhB;AAEAT,IAAAA,QAAQ,CAAC;AACPG,MAAAA,IAAI,EAAEV;AADC,KAAD,CAAR;AAIAO,IAAAA,QAAQ,CAAC;AACPG,MAAAA,IAAI,EAAER,WADC;AAEPS,MAAAA,OAAO,EAAEK;AAFF,KAAD,CAAR;AAKA,WAAOH,OAAO,CAACI,MAAR,EAAP;AACD,GAtBI,CAAP;AAwBD,CAzBM;AA2BP,OAAO,MAAMC,MAAM,GAAG,MAAOX,QAAD,IAAc;AACxCJ,EAAAA,WAAW,CAACe,MAAZ;AACAC,EAAAA,YAAY,CAACC,UAAb,CAAwB,MAAxB;AAEAb,EAAAA,QAAQ,CAAC;AACPG,IAAAA,IAAI,EAAET;AADC,GAAD,CAAR;AAGD,CAPM","sourcesContent":["import { LOGIN_SUCCESS, LOGIN_FAIL, LOGOUT, SET_MESSAGE } from \"./types\";\n\nimport AuthService from \"../services/auth.service\";\n\nexport const login = (username, password) => (dispatch) => {\n  return AuthService.login(username, password).then(\n    (data) => {\n      dispatch({\n        type: LOGIN_SUCCESS,\n        payload: { user: data },\n      });\n\n      return Promise.resolve();\n    },\n    (error) => {\n      const message = \"Invalid Username or password\";\n\n      dispatch({\n        type: LOGIN_FAIL,\n      });\n\n      dispatch({\n        type: SET_MESSAGE,\n        payload: message,\n      });\n\n      return Promise.reject();\n    }\n  );\n};\n\nexport const logout = () => (dispatch) => {\n  AuthService.logout();\n  localStorage.removeItem(\"user\");\n  \n  dispatch({\n    type: LOGOUT,\n  });\n};\n"]},"metadata":{},"sourceType":"module"}