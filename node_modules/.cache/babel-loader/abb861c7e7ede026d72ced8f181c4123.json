{"ast":null,"code":"var _jsxFileName = \"/Users/rissriva/Desktop/ExpenseManagementSystem/ExpenseManagement/frontend/src/components/FileUpload.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from \"react\";\nimport { useDropzone } from \"react-dropzone\";\nimport { Button } from \"react-bootstrap\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst FileUpload = () => {\n  _s();\n\n  const thumbsContainer = {\n    display: \"flex\",\n    flexDirection: \"row\",\n    flexWrap: \"wrap\",\n    marginTop: 16\n  };\n  const thumb = {\n    display: \"inline-flex\",\n    borderRadius: 2,\n    border: \"1px solid #eaeaea\",\n    marginBottom: 8,\n    marginRight: 8,\n    width: 100,\n    height: 100,\n    padding: 4,\n    boxSizing: \"border-box\"\n  };\n  const thumbInner = {\n    display: \"flex\",\n    minWidth: 0,\n    overflow: \"hidden\"\n  };\n  const img = {\n    display: \"block\",\n    width: \"auto\",\n    height: \"100%\"\n  };\n  const [files, setFiles] = useState([]);\n  const {\n    getRootProps,\n    getInputProps\n  } = useDropzone({\n    //accept: \"image/*\",\n    onDrop: acceptedFiles => {\n      setFiles(acceptedFiles.map(file => Object.assign(file, {\n        preview: URL.createObjectURL(file)\n      })));\n    }\n  });\n  const thumbs = files.map(file => /*#__PURE__*/_jsxDEV(\"div\", {\n    style: thumb,\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      style: thumbInner,\n      children: /*#__PURE__*/_jsxDEV(\"img\", {\n        src: file.preview,\n        style: img,\n        alt: file.name\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 7\n    }, this)\n  }, file.name, false, {\n    fileName: _jsxFileName,\n    lineNumber: 52,\n    columnNumber: 5\n  }, this));\n  useEffect(() => () => {\n    // Make sure to revoke the data uris to avoid memory leaks\n    files.forEach(file => URL.revokeObjectURL(file.preview));\n  }, [files]);\n  return /*#__PURE__*/_jsxDEV(\"section\", {\n    className: \"container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", { ...getRootProps({\n        className: \"dropzone\"\n      }),\n      children: [/*#__PURE__*/_jsxDEV(\"input\", { ...getInputProps()\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        children: \"Drag and drop some files here, or click to select files\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"aside\", {\n      style: thumbsContainer,\n      children: thumbs\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 68,\n    columnNumber: 5\n  }, this);\n};\n\n_s(FileUpload, \"Ee7v0zhGi6g6i2mfjkXvTwu1SJQ=\", false, function () {\n  return [useDropzone];\n});\n\n_c = FileUpload;\nexport default FileUpload;\n\nvar _c;\n\n$RefreshReg$(_c, \"FileUpload\");","map":{"version":3,"sources":["/Users/rissriva/Desktop/ExpenseManagementSystem/ExpenseManagement/frontend/src/components/FileUpload.js"],"names":["React","useEffect","useState","useDropzone","Button","FileUpload","thumbsContainer","display","flexDirection","flexWrap","marginTop","thumb","borderRadius","border","marginBottom","marginRight","width","height","padding","boxSizing","thumbInner","minWidth","overflow","img","files","setFiles","getRootProps","getInputProps","onDrop","acceptedFiles","map","file","Object","assign","preview","URL","createObjectURL","thumbs","name","forEach","revokeObjectURL","className"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport { useDropzone } from \"react-dropzone\";\nimport { Button } from \"react-bootstrap\";\n\nconst FileUpload = () => {\n  const thumbsContainer = {\n    display: \"flex\",\n    flexDirection: \"row\",\n    flexWrap: \"wrap\",\n    marginTop: 16,\n  };\n\n  const thumb = {\n    display: \"inline-flex\",\n    borderRadius: 2,\n    border: \"1px solid #eaeaea\",\n    marginBottom: 8,\n    marginRight: 8,\n    width: 100,\n    height: 100,\n    padding: 4,\n    boxSizing: \"border-box\",\n  };\n\n  const thumbInner = {\n    display: \"flex\",\n    minWidth: 0,\n    overflow: \"hidden\",\n  };\n\n  const img = {\n    display: \"block\",\n    width: \"auto\",\n    height: \"100%\",\n  };\n\n  const [files, setFiles] = useState([]);\n  const { getRootProps, getInputProps } = useDropzone({\n    //accept: \"image/*\",\n    onDrop: (acceptedFiles) => {\n      setFiles(\n        acceptedFiles.map((file) =>\n          Object.assign(file, {\n            preview: URL.createObjectURL(file),\n          })\n        )\n      );\n    },\n  });\n\n  const thumbs = files.map((file) => (\n    <div style={thumb} key={file.name}>\n      <div style={thumbInner}>\n        <img src={file.preview} style={img} alt={file.name}/>\n      </div>\n    </div>\n  ));\n\n  useEffect(\n    () => () => {\n      // Make sure to revoke the data uris to avoid memory leaks\n      files.forEach((file) => URL.revokeObjectURL(file.preview));\n    },\n    [files]\n  );\n\n  return (\n    <section className=\"container\">\n      <div {...getRootProps({ className: \"dropzone\" })}>\n        <input {...getInputProps()} />\n        <Button>Drag and drop some files here, or click to select files</Button>\n      </div>\n      <aside style={thumbsContainer}>{thumbs}</aside>\n    </section>\n  );\n};\n\nexport default FileUpload;\n"]},"metadata":{},"sourceType":"module"}