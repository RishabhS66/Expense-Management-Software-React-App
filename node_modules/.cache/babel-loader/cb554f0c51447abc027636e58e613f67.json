{"ast":null,"code":"import { ADD_PROJECTS, ADD_PROJECTS_FAIL, FETCH_PROJECTS, FETCH_PROJECTS_FAIL, FETCH_PROJECT_BY_ID, FETCH_PROJECT_BY_ID_FAIL, EDIT_PROJECT, EDIT_PROJECT_FAIL, DELETE_PROJECT, DELETE_PROJECT_FAIL, FETCH_PROJECT_EXPENSES, FETCH_PROJECT_EXPENSES_FAIL, SET_MESSAGE } from \"./types\";\nimport projectService from \"../services/project.service\";\nexport const getProjects = () => dispatch => {\n  return projectService.getProjects().then(data => {\n    dispatch({\n      type: FETCH_PROJECTS,\n      payload: {\n        projects: data\n      }\n    });\n    return Promise.resolve();\n  }, error => {\n    const message = error.response && error.response.data && error.response.data.message || error.message || error.toString();\n    dispatch({\n      type: FETCH_PROJECTS_FAIL\n    });\n    dispatch({\n      type: SET_MESSAGE,\n      payload: message\n    });\n    return Promise.reject();\n  });\n};\nexport const getProjectById = id => dispatch => {\n  return projectService.getProjectById(id).then(data => {\n    dispatch({\n      type: FETCH_PROJECT_BY_ID,\n      payload: {\n        project: data\n      }\n    });\n    return Promise.resolve();\n  }, error => {\n    const message = error.response && error.response.data && error.response.data.message || error.message || error.toString();\n    dispatch({\n      type: FETCH_PROJECT_BY_ID_FAIL\n    });\n    dispatch({\n      type: SET_MESSAGE,\n      payload: message\n    });\n    return Promise.reject();\n  });\n};\nexport const getProjectAmountById = id => dispatch => {\n  return projectService.getProjectAmountById(id).then(data => {\n    dispatch({\n      type: FETCH_PROJECT_EXPENSES,\n      payload: {\n        projectExpense: data\n      }\n    });\n    return Promise.resolve();\n  }, error => {\n    const message = error.response && error.response.data && error.response.data.message || error.message || error.toString();\n    dispatch({\n      type: FETCH_PROJECT_EXPENSES_FAIL\n    });\n    dispatch({\n      type: SET_MESSAGE,\n      payload: message\n    });\n    return Promise.reject();\n  });\n};\nexport const addProjects = payload => dispatch => {\n  return projectService.addProjects(payload).then(data => {\n    dispatch({\n      type: ADD_PROJECTS,\n      payload: {\n        project: data\n      }\n    });\n    return Promise.resolve();\n  }, error => {\n    const message = \"Project Could NOT Be Added\";\n    dispatch({\n      type: ADD_PROJECTS_FAIL\n    });\n    dispatch({\n      type: SET_MESSAGE,\n      payload: message\n    });\n    return Promise.reject();\n  });\n};\nexport const editProject = (id, payload) => dispatch => {\n  return projectService.editProject(id, payload).then(data => {\n    dispatch({\n      type: EDIT_PROJECT,\n      payload: {\n        project: data\n      }\n    });\n    return Promise.resolve();\n  }, error => {\n    const message = \"Project Could NOT Be Updated\";\n    dispatch({\n      type: EDIT_PROJECT_FAIL\n    });\n    dispatch({\n      type: SET_MESSAGE,\n      payload: message\n    });\n    return Promise.reject();\n  });\n};\nexport const deleteProject = id => dispatch => {\n  return projectService.deleteProject(id).then(data => {\n    dispatch({\n      type: DELETE_PROJECT,\n      payload: {\n        project: data\n      }\n    });\n    return Promise.resolve();\n  }, error => {\n    const message = error.response && error.response.data && error.response.data.message || error.message || error.toString();\n    dispatch({\n      type: DELETE_PROJECT_FAIL\n    });\n    dispatch({\n      type: SET_MESSAGE,\n      payload: message\n    });\n    return Promise.reject();\n  });\n};","map":{"version":3,"sources":["/Users/rissriva/Documents/GitHub/Expense-Management-Software-React-App/src/actions/project.js"],"names":["ADD_PROJECTS","ADD_PROJECTS_FAIL","FETCH_PROJECTS","FETCH_PROJECTS_FAIL","FETCH_PROJECT_BY_ID","FETCH_PROJECT_BY_ID_FAIL","EDIT_PROJECT","EDIT_PROJECT_FAIL","DELETE_PROJECT","DELETE_PROJECT_FAIL","FETCH_PROJECT_EXPENSES","FETCH_PROJECT_EXPENSES_FAIL","SET_MESSAGE","projectService","getProjects","dispatch","then","data","type","payload","projects","Promise","resolve","error","message","response","toString","reject","getProjectById","id","project","getProjectAmountById","projectExpense","addProjects","editProject","deleteProject"],"mappings":"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","sourcesContent":["import { ADD_PROJECTS, ADD_PROJECTS_FAIL, FETCH_PROJECTS, FETCH_PROJECTS_FAIL, FETCH_PROJECT_BY_ID, FETCH_PROJECT_BY_ID_FAIL, EDIT_PROJECT, EDIT_PROJECT_FAIL, DELETE_PROJECT, DELETE_PROJECT_FAIL, FETCH_PROJECT_EXPENSES, FETCH_PROJECT_EXPENSES_FAIL, SET_MESSAGE } from \"./types\";\nimport projectService from \"../services/project.service\";\n\nexport const getProjects = () => (dispatch) => {\n  return projectService.getProjects().then(\n    (data) => {\n      dispatch({\n        type: FETCH_PROJECTS,\n        payload: { projects: data },\n      });\n      return Promise.resolve();\n    },\n    (error) => {\n      const message = (error.response &&\n          error.response.data &&\n          error.response.data.message) ||\n        error.message ||\n        error.toString();\n\n      dispatch({\n        type: FETCH_PROJECTS_FAIL,\n      });\n\n      dispatch({\n        type: SET_MESSAGE,\n        payload: message,\n      });\n\n      return Promise.reject();\n    }\n  );\n};\n\nexport const getProjectById = (id) => (dispatch) => {\n  return projectService.getProjectById(id).then(\n    (data) => {\n      dispatch({\n        type: FETCH_PROJECT_BY_ID,\n        payload: { project: data },\n      });\n      return Promise.resolve();\n    },\n    (error) => {\n      const message = (error.response &&\n          error.response.data &&\n          error.response.data.message) ||\n        error.message ||\n        error.toString();\n\n      dispatch({\n        type: FETCH_PROJECT_BY_ID_FAIL,\n      });\n\n      dispatch({\n        type: SET_MESSAGE,\n        payload: message,\n      });\n\n      return Promise.reject();\n    }\n  );\n};\n\nexport const getProjectAmountById = (id) => (dispatch) => {\n  return projectService.getProjectAmountById(id).then(\n    (data) => {\n      dispatch({\n        type: FETCH_PROJECT_EXPENSES,\n        payload: { projectExpense: data },\n      });\n      return Promise.resolve();\n    },\n    (error) => {\n      const message = (error.response &&\n          error.response.data &&\n          error.response.data.message) ||\n        error.message ||\n        error.toString();\n\n      dispatch({\n        type: FETCH_PROJECT_EXPENSES_FAIL,\n      });\n\n      dispatch({\n        type: SET_MESSAGE,\n        payload: message,\n      });\n\n      return Promise.reject();\n    }\n  );\n};\n\nexport const addProjects = (payload) => (dispatch) => {\n  return projectService.addProjects(payload).then(\n    (data) => {\n      dispatch({\n        type: ADD_PROJECTS,\n        payload: { project: data },\n      });\n\n      return Promise.resolve();\n    },\n    (error) => {\n      const message = \"Project Could NOT Be Added\";\n        \n      dispatch({\n        type: ADD_PROJECTS_FAIL,\n      });\n\n      dispatch({\n        type: SET_MESSAGE,\n        payload: message,\n      });\n\n      return Promise.reject();\n    }\n  );\n};\n\nexport const editProject = (id, payload) => (dispatch) => {\n  return projectService.editProject(id, payload).then(\n    (data) => {\n      dispatch({\n        type: EDIT_PROJECT,\n        payload: { project: data },\n      });\n\n      return Promise.resolve();\n    },\n    (error) => {\n      const message = \"Project Could NOT Be Updated\";\n        \n      dispatch({\n        type: EDIT_PROJECT_FAIL,\n      });\n\n      dispatch({\n        type: SET_MESSAGE,\n        payload: message,\n      });\n\n      return Promise.reject();\n    }\n  );\n};\n\nexport const deleteProject = (id) => (dispatch) => {\n  return projectService.deleteProject(id).then(\n    (data) => {\n      dispatch({\n        type: DELETE_PROJECT,\n        payload: { project: data },\n      });\n      return Promise.resolve();\n    },\n    (error) => {\n      const message = (error.response &&\n          error.response.data &&\n          error.response.data.message) ||\n        error.message ||\n        error.toString();\n\n      dispatch({\n        type: DELETE_PROJECT_FAIL,\n      });\n\n      dispatch({\n        type: SET_MESSAGE,\n        payload: message,\n      });\n\n      return Promise.reject();\n    }\n  );\n};"]},"metadata":{},"sourceType":"module"}