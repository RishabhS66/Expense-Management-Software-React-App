{"ast":null,"code":"import { expenseConstants } from \"../constants/expense.constants\";\nimport expenseService from \"../services/expense.service\";\nimport { SET_MESSAGE } from \"./types\";\nexport const getExpenseSheets = () => dispatch => {\n  return expenseService.getExpenseSheets().then(data => {\n    dispatch({\n      type: expenseConstants.GET_SHEETS_SUCCESS,\n      payload: {\n        entries: data\n      }\n    });\n    return Promise.resolve();\n  }, error => {\n    const message = error.response && error.response.data && error.response.data.message || error.message || error.toString();\n    dispatch({\n      type: expenseConstants.GET_SHEETS_FAILURE\n    });\n    dispatch({\n      type: SET_MESSAGE,\n      payload: message\n    });\n    return Promise.reject();\n  });\n};\nexport const addEntry = payload => dispatch => {\n  return expenseService.addEntry(payload).then(data => {\n    dispatch({\n      type: expenseConstants.ADD_SHEETS_SUCCESS,\n      payload: {\n        entry: data\n      }\n    });\n    return Promise.resolve();\n  }, error => {\n    const message = \"Entry could not be added\";\n    console.log(message);\n    dispatch({\n      type: expenseConstants.ADD_SHEETS_FAILURE\n    });\n    dispatch({\n      type: SET_MESSAGE,\n      payload: message\n    });\n    return Promise.reject;\n  });\n};\nexport const deleteEntry = id => dispatch => {\n  return expenseService.deleteEntry(id).then(data => {\n    dispatch({\n      type: expenseConstants.DELETE_SHEETS_SUCCESS,\n      payload: {\n        entry: data\n      }\n    });\n    return Promise.resolve();\n  }, error => {\n    const message = error.response && error.response.data && error.response.data.message || error.message || error.toString();\n    dispatch({\n      type: expenseConstants.DELETE_SHEETS_FAILURE\n    });\n    dispatch({\n      type: SET_MESSAGE,\n      payload: message\n    });\n    return Promise.reject();\n  });\n};\nexport const editEntry = (id, payload) => dispatch => {\n  return expenseService.editEntry(id, payload).then(data => {\n    dispatch({\n      type: expenseConstants.EDIT_SHEETS_SUCCESS,\n      payload: {\n        entry: data\n      }\n    });\n    return Promise.resolve();\n  }, error => {\n    const message = \"Entry Edit Failed\";\n    dispatch({\n      type: expenseConstants.EDIT_SHEETS_FAILURE\n    });\n    dispatch({\n      type: SET_MESSAGE,\n      payload: message\n    });\n    return Promise.reject();\n  });\n};\nexport const getSubmittedExpenses = () => dispatch => {\n  return expenseService.getExpenseSheets().then(data => {\n    dispatch({\n      type: expenseConstants.GET_SUBMITTED_EXPENSES,\n      payload: {\n        expensesSubmitted: data\n      }\n    });\n    return Promise.resolve();\n  }, error => {\n    const message = error.response && error.response.data && error.response.data.message || error.message || error.toString();\n    dispatch({\n      type: expenseConstants.GET_SUBMITTED_EXPENSES_FAIL\n    });\n    dispatch({\n      type: SET_MESSAGE,\n      payload: message\n    });\n    return Promise.reject();\n  });\n};\nexport const updateExpenseState = (id, payload) => dispatch => {\n  return expenseService.updateExpenseState(id, payload).then(data => {\n    dispatch({\n      type: expenseConstants.UPDATE_EXPENSE_STATUS,\n      payload: {\n        expensesSubmitted: data\n      }\n    });\n    return Promise.resolve();\n  }, error => {\n    const message = error.response && error.response.data && error.response.data.message || error.message || error.toString();\n    dispatch({\n      type: expenseConstants.UPDATE_EXPENSE_STATUS_FAIL\n    });\n    dispatch({\n      type: SET_MESSAGE,\n      payload: message\n    });\n    return Promise.reject();\n  });\n};","map":{"version":3,"sources":["/Users/rissriva/Desktop/ExpenseManagementSystem/ExpenseManagement/frontend/src/actions/expense.actions.js"],"names":["expenseConstants","expenseService","SET_MESSAGE","getExpenseSheets","dispatch","then","data","type","GET_SHEETS_SUCCESS","payload","entries","Promise","resolve","error","message","response","toString","GET_SHEETS_FAILURE","reject","addEntry","ADD_SHEETS_SUCCESS","entry","console","log","ADD_SHEETS_FAILURE","deleteEntry","id","DELETE_SHEETS_SUCCESS","DELETE_SHEETS_FAILURE","editEntry","EDIT_SHEETS_SUCCESS","EDIT_SHEETS_FAILURE","getSubmittedExpenses","GET_SUBMITTED_EXPENSES","expensesSubmitted","GET_SUBMITTED_EXPENSES_FAIL","updateExpenseState","UPDATE_EXPENSE_STATUS","UPDATE_EXPENSE_STATUS_FAIL"],"mappings":"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","sourcesContent":["import { expenseConstants } from \"../constants/expense.constants\";\nimport expenseService from \"../services/expense.service\";\nimport { SET_MESSAGE } from \"./types\";\n\nexport const getExpenseSheets = () => (dispatch) => {\n  return expenseService.getExpenseSheets().then(\n    (data) => {\n      dispatch({\n        type: expenseConstants.GET_SHEETS_SUCCESS,\n        payload: { entries: data },\n      });\n      return Promise.resolve();\n    },\n    (error) => {\n      const message =\n        (error.response &&\n          error.response.data &&\n          error.response.data.message) ||\n        error.message ||\n        error.toString();\n\n      dispatch({\n        type: expenseConstants.GET_SHEETS_FAILURE,\n      });\n\n      dispatch({\n        type: SET_MESSAGE,\n        payload: message,\n      });\n\n      return Promise.reject();\n    }\n  );\n};\n\nexport const addEntry = (payload) => (dispatch) => {\n  return expenseService.addEntry(payload).then(\n    (data) => {\n      dispatch({\n        type: expenseConstants.ADD_SHEETS_SUCCESS,\n        payload: { entry: data },\n      });\n      return Promise.resolve();\n    },\n    (error) => {\n      const message = \"Entry could not be added\";\n      console.log(message);\n\n      dispatch({\n        type: expenseConstants.ADD_SHEETS_FAILURE,\n      });\n\n      dispatch({\n        type: SET_MESSAGE,\n        payload: message,\n      });\n\n      return Promise.reject;\n    }\n  );\n};\nexport const deleteEntry = (id) => (dispatch) => {\n  return expenseService.deleteEntry(id).then(\n    (data) => {\n      dispatch({\n        type: expenseConstants.DELETE_SHEETS_SUCCESS,\n        payload: { entry: data },\n      });\n      return Promise.resolve();\n    },\n    (error) => {\n      const message =\n        (error.response &&\n          error.response.data &&\n          error.response.data.message) ||\n        error.message ||\n        error.toString();\n\n      dispatch({\n        type: expenseConstants.DELETE_SHEETS_FAILURE,\n      });\n\n      dispatch({\n        type: SET_MESSAGE,\n        payload: message,\n      });\n\n      return Promise.reject();\n    }\n  );\n};\n\nexport const editEntry = (id, payload) => (dispatch) => {\n  return expenseService.editEntry(id, payload).then(\n    (data) => {\n      dispatch({\n        type: expenseConstants.EDIT_SHEETS_SUCCESS,\n        payload: { entry: data },\n      });\n\n      return Promise.resolve();\n    },\n    (error) => {\n      const message = \"Entry Edit Failed\";\n\n      dispatch({\n        type: expenseConstants.EDIT_SHEETS_FAILURE,\n      });\n\n      dispatch({\n        type: SET_MESSAGE,\n        payload: message,\n      });\n\n      return Promise.reject();\n    }\n  );\n};\n\nexport const getSubmittedExpenses = () => (dispatch) => {\n  return expenseService.getExpenseSheets().then(\n    (data) => {\n      dispatch({\n        type: expenseConstants.GET_SUBMITTED_EXPENSES,\n        payload: { expensesSubmitted: data },\n      });\n      return Promise.resolve();\n    },\n    (error) => {\n      const message =\n        (error.response &&\n          error.response.data &&\n          error.response.data.message) ||\n        error.message ||\n        error.toString();\n\n      dispatch({\n        type: expenseConstants.GET_SUBMITTED_EXPENSES_FAIL,\n      });\n\n      dispatch({\n        type: SET_MESSAGE,\n        payload: message,\n      });\n\n      return Promise.reject();\n    }\n  );\n};\n\nexport const updateExpenseState = (id, payload) => (dispatch) => {\n  return expenseService.updateExpenseState(id, payload).then(\n    (data) => {\n      dispatch({\n        type: expenseConstants.UPDATE_EXPENSE_STATUS,\n        payload: { expensesSubmitted: data },\n      });\n      return Promise.resolve();\n    },\n    (error) => {\n      const message =\n        (error.response &&\n          error.response.data &&\n          error.response.data.message) ||\n        error.message ||\n        error.toString();\n\n      dispatch({\n        type: expenseConstants.UPDATE_EXPENSE_STATUS_FAIL,\n      });\n\n      dispatch({\n        type: SET_MESSAGE,\n        payload: message,\n      });\n\n      return Promise.reject();\n    }\n  );\n};\n\n\n"]},"metadata":{},"sourceType":"module"}